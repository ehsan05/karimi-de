'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _crate = require('./crate');

var _crate2 = _interopRequireDefault(_crate);

var _target = require('./target');

var _target2 = _interopRequireDefault(_target);

var _buildSettings = require('./build-settings');

var _buildSettings2 = _interopRequireDefault(_buildSettings);

var _log = require('./log');

var _log2 = _interopRequireDefault(_log);

var _child_process = require('./async/child_process');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

// Represents a Neon project and its directory tree.
class Project {

  constructor(root) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var _options$crate = options.crate;
    let crate = _options$crate === undefined ? 'native' : _options$crate;

    this.root = root;
    this.manifest = require(_path2.default.resolve(root, 'package.json'));
    this.crate = new _crate2.default(this, crate);
  }

  build(toolchain, release, abi) {
    var _this = this;

    return _asyncToGenerator(function* () {
      let target = new _target2.default(_this.crate, { release: release });
      let settings = _buildSettings2.default.current(toolchain);

      // 1. Force a rebuild if build settings have changed.
      if (!target.inState(settings)) {
        (0, _log2.default)("forcing rebuild for new build settings");
        yield target.clean();
      }

      // 2. Build the dylib.
      (0, _log2.default)("running cargo");
      yield target.build(toolchain, settings, abi);

      // 3. Copy the dylib as the main addon file.
      (0, _log2.default)("generating " + _path2.default.join(_this.crate.subdirectory, _this.crate.nodefile));
      yield _this.crate.finish(target.dylib);
    })();
  }

  clean() {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      // 1. Do a `cargo clean` to delete the `target` directory.
      (0, _log2.default)("cargo clean");
      yield (0, _child_process.spawn)("cargo", ["clean"], { cwd: _this2.crate.root, stdio: 'inherit' });

      // 2. Remove the main addon file.
      (0, _log2.default)("remove " + _path2.default.join(_this2.crate.subdirectory, _this2.crate.nodefile));
      yield _this2.crate.removeAddon();

      // 3. Clear the artifacts file.
      _this2.crate.resetArtifacts();
      _this2.crate.saveArtifacts();
    })();
  }

}exports.default = Project;
;