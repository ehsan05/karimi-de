'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _toml = require('toml');

var _toml2 = _interopRequireDefault(_toml);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = require('./async/fs');

var _artifacts = require('./artifacts');

var _artifacts2 = _interopRequireDefault(_artifacts);

var _buildSettings = require('./build-settings');

var _buildSettings2 = _interopRequireDefault(_buildSettings);

var _log = require('./log');

var _log2 = _interopRequireDefault(_log);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

// Represents the native crate inside a Neon project.
class Crate {

  constructor(project) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var _options$subdirectory = options.subdirectory;
    let subdirectory = _options$subdirectory === undefined ? 'native' : _options$subdirectory;
    var _options$nodefile = options.nodefile;
    let nodefile = _options$nodefile === undefined ? 'index.node' : _options$nodefile;

    this.project = project; // the Neon project containing this crate
    this.subdirectory = subdirectory; // the subpath of this crate relative to the Neon project root
    this.nodefile = nodefile; // the subpath of the .node addon relative to this crate root
    this.root = _path2.default.resolve(project.root, subdirectory); // the absolute path of this crate
    this.addon = _path2.default.resolve(this.root, nodefile); // the absolute path of the .node addon
    this.manifest = // the parsed Cargo.toml manifest
    loadManifest(_path2.default.resolve(this.root, 'Cargo.toml'));
    this.name = this.manifest.lib.name; // the crate name extracted from the manifest
    this.artifactsfile = // the absolute path of the artifacts file
    _path2.default.resolve(this.root, 'artifacts.json');
    this.artifacts = _artifacts2.default.load(this.artifactsfile); // the state of the previous build for each target
  }

  finish(dylib) {
    var _this = this;

    return _asyncToGenerator(function* () {
      yield (0, _fs2.remove)(_this.addon);
      yield (0, _fs2.copy)(dylib, _this.addon);
    })();
  }

  removeAddon() {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      yield (0, _fs2.remove)(_this2.addon);
    })();
  }

  resetArtifacts() {
    this.artifacts = new _artifacts2.default();
  }

  saveArtifacts() {
    this.artifacts.save(this.artifactsfile);
  }

}

exports.default = Crate;
function loadManifest(file) {
  let metadata = _toml2.default.parse((0, _fs.readFileSync)(file, 'utf8'));

  if (!metadata.lib.name) {
    throw new Error("Cargo.toml does not contain a [lib] section with a 'name' field");
  }

  return metadata;
}