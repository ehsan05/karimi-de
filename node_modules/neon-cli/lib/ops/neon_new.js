'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

let compile = (() => {
  var _ref2 = _asyncToGenerator(function* (filename) {
    return _handlebars2.default.compile((yield (0, _fs.readFile)(_path2.default.resolve(TEMPLATES_DIR, filename), 'utf8')), { noEscape: true });
  });

  return function compile(_x) {
    return _ref2.apply(this, arguments);
  };
})();

let guessAuthor = (() => {
  var _ref3 = _asyncToGenerator(function* () {
    let author = {
      name: process.env.USER || process.env.USERNAME,
      email: undefined
    };
    try {
      let config = yield (0, _gitConfig2.default)();
      if (config.user.name) {
        author.name = config.user.name;
      }
      if (config.user.email) {
        author.email = config.user.email;
      }
      return author;
    } catch (e) {
      return author;
    }
  });

  return function guessAuthor() {
    return _ref3.apply(this, arguments);
  };
})();

var _fs = require('../async/fs');

var _inquirer = require('../async/inquirer');

var _gitConfig = require('../async/git-config');

var _gitConfig2 = _interopRequireDefault(_gitConfig);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _handlebars = require('handlebars');

var _handlebars2 = _interopRequireDefault(_handlebars);

var _semver = require('semver');

var _semver2 = _interopRequireDefault(_semver);

var _validateNpmPackageLicense = require('validate-npm-package-license');

var _validateNpmPackageLicense2 = _interopRequireDefault(_validateNpmPackageLicense);

var _validateNpmPackageName = require('validate-npm-package-name');

var _validateNpmPackageName2 = _interopRequireDefault(_validateNpmPackageName);

var _style = require('./style');

var style = _interopRequireWildcard(_style);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const ROOT_DIR = _path2.default.resolve(__dirname, '..', '..');
const TEMPLATES_DIR = _path2.default.resolve(ROOT_DIR, 'templates');

const NEON_CLI_VERSION = _asyncToGenerator(function* () {
  return JSON.parse((yield (0, _fs.readFile)(_path2.default.resolve(ROOT_DIR, 'package.json'), 'utf8'))).version;
})();

const GITIGNORE_TEMPLATE = compile('.gitignore.hbs');
const CARGO_TEMPLATE = compile('Cargo.toml.hbs');
const NPM_TEMPLATE = compile('package.json.hbs');
const INDEXJS_TEMPLATE = compile('index.js.hbs');
const LIBRS_TEMPLATE = compile('lib.rs.hbs');
const README_TEMPLATE = compile('README.md.hbs');
const BUILDRS_TEMPLATE = compile('build.rs.hbs');

exports.default = (() => {
  var _ref4 = _asyncToGenerator(function* (pwd, name) {
    let its = (0, _validateNpmPackageName2.default)(name);
    if (!its.validForNewPackages) {
      let errors = (its.errors || []).concat(its.warnings || []);
      throw new Error("Sorry, " + errors.join(" and ") + ".");
    }

    // check for a scoped name
    let scoped = name.match(/@([^\/]+)\/(.*)/);

    var _ref5 = scoped || [, null, name],
        _ref6 = _slicedToArray(_ref5, 3);

    let scope = _ref6[1],
        local = _ref6[2];


    console.log("This utility will walk you through creating the " + style.project(name) + " Neon project.");
    console.log("It only covers the most common items, and tries to guess sensible defaults.");
    console.log();
    console.log("Press ^C at any time to quit.");

    let root = _path2.default.resolve(pwd, local);
    let guess = yield guessAuthor();

    let answers = yield (0, _inquirer.prompt)([{
      type: 'input',
      name: 'version',
      message: "version",
      default: "0.1.0",
      validate: function validate(input) {
        if (_semver2.default.valid(input)) {
          return true;
        }
        return "Invalid version: " + input;
      }
    }, { type: 'input', name: 'description', message: "description" }, { type: 'input', name: 'node', message: "node entry point", default: "lib/index.js" }, { type: 'input', name: 'git', message: "git repository" }, { type: 'input', name: 'author', message: "author", default: guess.name }, { type: 'input', name: 'email', message: "email", default: guess.email }, {
      type: 'input',
      name: 'license',
      message: "license",
      default: "MIT",
      validate: function validate(input) {
        let its = (0, _validateNpmPackageLicense2.default)(input);
        if (its.validForNewPackages) {
          return true;
        }
        let errors = (its.errors || []).concat(its.warnings || []);
        return "Sorry, " + errors.join(" and ") + ".";
      }
    }]);

    answers.name = {
      npm: {
        full: name,
        scope: scope,
        local: local
      },
      cargo: {
        external: local,
        internal: local.replace(/-/g, "_")
      }
    };
    let version = yield NEON_CLI_VERSION;
    let ctx = {
      project: answers,
      "neon-cli": {
        major: _semver2.default.major(version),
        minor: _semver2.default.minor(version),
        patch: _semver2.default.patch(version)
      }
    };

    let lib = _path2.default.resolve(root, _path2.default.dirname(answers.node));
    let native_ = _path2.default.resolve(root, 'native');
    let src = _path2.default.resolve(native_, 'src');

    yield (0, _fs.mkdirs)(lib);
    yield (0, _fs.mkdirs)(src);

    yield (0, _fs.writeFile)(_path2.default.resolve(root, '.gitignore'), (yield GITIGNORE_TEMPLATE)(ctx), { flag: 'wx' });
    yield (0, _fs.writeFile)(_path2.default.resolve(root, 'package.json'), (yield NPM_TEMPLATE)(ctx), { flag: 'wx' });
    yield (0, _fs.writeFile)(_path2.default.resolve(native_, 'Cargo.toml'), (yield CARGO_TEMPLATE)(ctx), { flag: 'wx' });
    yield (0, _fs.writeFile)(_path2.default.resolve(root, 'README.md'), (yield README_TEMPLATE)(ctx), { flag: 'wx' });
    yield (0, _fs.writeFile)(_path2.default.resolve(root, answers.node), (yield INDEXJS_TEMPLATE)(ctx), { flag: 'wx' });
    yield (0, _fs.writeFile)(_path2.default.resolve(src, 'lib.rs'), (yield LIBRS_TEMPLATE)(ctx), { flag: 'wx' });
    yield (0, _fs.writeFile)(_path2.default.resolve(native_, 'build.rs'), (yield BUILDRS_TEMPLATE)(ctx), { flag: 'wx' });

    let relativeRoot = _path2.default.relative(pwd, root);
    let relativeNode = _path2.default.relative(pwd, _path2.default.resolve(root, answers.node));
    let relativeRust = _path2.default.relative(pwd, _path2.default.resolve(src, 'lib.rs'));

    console.log();
    console.log("Woo-hoo! Your Neon project has been created in: " + style.path(relativeRoot));
    console.log();
    console.log("The main Node entry point is at: " + style.path(relativeNode));
    console.log("The main Rust entry point is at: " + style.path(relativeRust));
    console.log();
    console.log("To build your project, just run " + style.command("npm install") + " from within the " + style.path(relativeRoot) + " directory.");
    console.log("Then you can test it out with " + style.command("node -e 'require(\"./\")'") + ".");
    console.log();
    console.log("Happy hacking!");
  });

  function wizard(_x2, _x3) {
    return _ref4.apply(this, arguments);
  }

  return wizard;
})();